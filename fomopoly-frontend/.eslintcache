[{"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Game.js":"1","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Board.js":"2","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/index.js":"3","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/reducers/gameReducer.js":"4","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/TurnHandler.js":"5","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/UserForm.js":"6","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/actions/spaceActions.js":"7","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Roller.js":"8","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/PropCard.js":"9","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Menu.js":"10","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/NewUserCard.js":"11","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/AboutPage.js":"12","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/actions/userActions.js":"13","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/AboutPageContainer.js":"14","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/TradeHandler.js":"15","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/TraderCard.js":"16","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/UserStatCard.js":"17","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/App.js":"18","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/CornerSpace.js":"19"},{"size":1893,"mtime":1614800233291,"results":"20","hashOfConfig":"21"},{"size":2376,"mtime":1606773818089,"results":"22","hashOfConfig":"21"},{"size":567,"mtime":1608403257002,"results":"23","hashOfConfig":"21"},{"size":4297,"mtime":1612291267874,"results":"24","hashOfConfig":"21"},{"size":13780,"mtime":1615308616478,"results":"25","hashOfConfig":"21"},{"size":2059,"mtime":1606930964739,"results":"26","hashOfConfig":"21"},{"size":1368,"mtime":1613081595778,"results":"27","hashOfConfig":"21"},{"size":415,"mtime":1606843601161,"results":"28","hashOfConfig":"21"},{"size":4806,"mtime":1611859495327,"results":"29","hashOfConfig":"21"},{"size":1434,"mtime":1613080772302,"results":"30","hashOfConfig":"21"},{"size":3518,"mtime":1613085019243,"results":"31","hashOfConfig":"21"},{"size":1145,"mtime":1606833224759,"results":"32","hashOfConfig":"21"},{"size":2282,"mtime":1608664615279,"results":"33","hashOfConfig":"21"},{"size":189,"mtime":1606833091777,"results":"34","hashOfConfig":"21"},{"size":3118,"mtime":1616783192370,"results":"35","hashOfConfig":"21"},{"size":6757,"mtime":1616783343813,"results":"36","hashOfConfig":"21"},{"size":222,"mtime":1608403136982,"results":"37","hashOfConfig":"21"},{"size":542,"mtime":1608061328291,"results":"38","hashOfConfig":"21"},{"size":1378,"mtime":1606802201175,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kqnvbd",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"55"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Game.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Board.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/index.js",[],["84","85"],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/reducers/gameReducer.js",[],["86","87"],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/TurnHandler.js",["88","89","90"],"import React, { Component, Fragment } from 'react'\nimport {connect} from 'react-redux'\nimport {moveUserOneSpace, saveUser, payToBank, payUser, doubleUser, resetDoubles} from '../actions/userActions'\nimport {sellSpace, saveSpace} from '../actions/spaceActions'\nimport Roller from './Roller'\nimport Button from './Button'\nimport PropCard from './PropCard'\n\nclass TurnHandler extends Component{\n    constructor(props)\n    {\n        super()\n        this.state = {currentUserIndex: 0, firstDice: 3, secondDice: 4, total: 0, rollable: 'active-button', landed: false, ended: false, text: '', location: 'Go', spacesToSave: []}\n    }\n\n    componentDidMount() {\n        this.setState({...this.state, text: `Now ${this.currentUser().name}'s Turn!`})\n    }\n\n    currentUser() {\n        return this.props.users[this.state.currentUserIndex]\n    }\n\n    handleRoll()\n    {\n        if(this.state.rollable !== 'disabled-button')\n        {\n            this.setState({...this.state, rollable: 'disabled-button'})\n            this.roll()\n            setTimeout(() => {\n                if(this.state.firstDice !== this.state.secondDice)\n                {\n                    this.moveUser()\n                    this.props.resetDoubles(this.currentUser().id)\n                }\n                else\n                {\n                    this.props.doubleUser(this.currentUser().id)\n                    setTimeout(() => {\n                        if(this.currentUser().doubles_rolled === 3)\n                        {\n                            this.currentUser().in_jail = true\n                            this.currentUser().current_location = 10\n                            this.props.resetDoubles(this.currentUser().id)\n                            this.setState({...this.state, landed: true, text: `Three doubles in a row? Wait, that's illegal!`, location: this.props.spaces[this.currentUser().current_location - 1]})\n                        }\n                        else\n                        {\n                            this.moveUser()\n                        }\n                    }, 150)\n                }\n            }, 150)\n\n        }\n    }\n\n    handleLanding()\n    {\n        switch(this.currentUser().current_location)\n        {\n            case 4:\n                this.props.payToBank(this.currentUser().id, 200)\n                break\n            case 30:\n                this.currentUser().in_jail = true\n                this.currentUser().current_location = 10\n                this.props.resetDoubles(this.currentUser().id)\n                this.setState({...this.state, text: 'Sent to jail! Oh no!', location: this.props.spaces[this.currentUser().current_location - 1]})\n                break\n            case 38:\n                this.props.payToBank(this.currentUser().id, 100)\n                break\n            default:\n                //nothing. This should only happen on free parking and just visiting/jail\n        }\n        console.log(this.props.spaces[this.currentUser().current_location - 1].name)\n        if(!this.currentUser().in_jail)\n        {\n            this.setState({...this.state, landed: true, location: this.props.spaces[this.currentUser().current_location - 1]})\n        }\n        else\n        {\n            this.setState({...this.state, landed: true})\n        }\n    }\n\n    roll()\n    {\n        const firstDice = parseInt((Math.random() * 6) + 1)\n        const secondDice = parseInt((Math.random() * 6) + 1)\n        const total = firstDice + secondDice\n        this.setState({firstDice: firstDice, secondDice: secondDice, total: total});\n    }\n\n    moveUser()\n    {\n        const user = this.currentUser()\n        const originalTotal = this.state.total\n        const handleLanding = this.handleLanding.bind(this)\n        const passGo = (() => this.props.payUser(this.currentUser().id, 200));\n        (function myLoop(i, action) {\n            setTimeout(function() {\n                if(39 - user.current_location === originalTotal - i)\n                {\n                    passGo()\n                }\n                action(user.id)       \n                if (--i) \n                {\n                    myLoop(i, action);\n                }\n                else \n                {\n                    handleLanding()\n                }\n            }, 500)\n        })(this.state.total, this.props.moveUserOneSpace);\n    }\n\n    nextTurn()\n    {\n        if (this.currentUser().doubles_rolled === 0 || this.currentUser().in_jail === true)\n        {\n            if(this.currentUser().in_jail === false)\n            {\n                this.props.resetDoubles(this.currentUser().id)\n            }\n            this.setState((previousState) => {\n                if(this.state.currentUserIndex < this.props.users.length - 1)\n                {\n                    return {currentUserIndex: previousState.currentUserIndex + 1, rollable: 'active-button', landed: false, ended: false}\n                }\n                else\n                {\n                    this.props.users.forEach((user) => {this.props.saveUser(user)})\n                    this.state.spacesToSave.forEach((space) => {this.props.saveSpace(this.props.spaces[space - 1])})\n                    return {currentUserIndex: 0, rollable: 'active-button', landed: false, ended: false, spacesToSave: []}\n                }\n            })\n            {setTimeout(() => {\n                if(!this.currentUser().in_jail)\n                {\n                    this.setState({...this.state, text: `Now ${this.currentUser().name}'s Turn!`})\n                }\n                this.props.setCurrentUser(this.state.currentUserIndex)\n            }, 150)}\n        }\n        else\n        {\n            this.setState({...this.state, landed: false, ended: false, rollable: 'active-button', text: `Doubles! Go again, ${this.currentUser().name}!`})\n        }\n    }\n\n    render(){\n        \n        return(\n            <div className='turn-handler'>\n                <Roller first={this.state.firstDice} second={this.state.secondDice} total={this.state.total}/>\n                <div className={this.state.rollable} onClick={() => this.handleRoll()}>Roll</div>\n                <p style={{padding: 4}}>{this.state.text}</p>\n                {this.renderButtons()}\n            </div>\n        )\n    }\n\n    renderButtons()\n    {\n        if(this.state.landed)\n        {       \n                return (\n                    <>\n                        <Button type='passive' text='Dev End Turn' handleClick={this.nextTurn.bind(this)}/>\n                        <PropCard space={this.state.location}/>\n                        {this.landedButtons()}\n                    </>\n                )\n        }\n        else if(this.currentUser().in_jail === true)\n        {\n            if(this.state.rollable === 'active-button')\n            {\n                this.setState({...this.state, rollable: 'disabled-button', text: `You're in jail, ${this.currentUser().name}. What's next?`})\n            }\n            return (\n                <>\n                    <Button type='active' text='Pay Bail ₣50' handleClick={() => {\n                        this.currentUser().in_jail = false\n                        this.setState({...this.state, rollable: 'active-button', text: `You're free, ${this.currentUser().name}! Now you get to take your turn!`})\n                        this.props.resetDoubles(this.currentUser().id)\n                        this.props.payToBank(this.currentUser().id, 50)\n                    }}/>\n                    <Button type='active' text={`Roll for Doubles (${this.currentUser().doubles_rolled + 1})`} handleClick={() => {\n                        this.roll()\n                        setTimeout(() => {\n                            if(this.state.firstDice === this.state.secondDice)\n                            {\n                                this.currentUser().in_jail = false\n                                this.props.resetDoubles(this.currentUser().id)\n                                this.moveUser()\n                            }\n                            else\n                            {\n                                this.props.doubleUser(this.currentUser().id)\n                                if(this.currentUser().doubles_rolled === 3)\n                                {\n                                    this.currentUser().in_jail = false\n                                    this.props.resetDoubles(this.currentUser().id)\n                                    this.props.payToBank(this.currentUser().id, 50)\n                                    this.moveUser()\n                                }\n                                else\n                                {\n                                    this.setState({...this.state, text: 'No luck! Try again next time!', location: this.props.spaces[this.currentUser().current_location - 1]})\n                                    this.handleLanding()\n                                }\n                            }\n                        }, 150)\n                    }}/>\n                </>\n            )\n        }\n    }\n\n    landedButtons() \n    {\n        if(!this.state.ended)\n        {\n            if(this.state.location.color)\n            {\n                if(!(this.state.location.user_id))\n                {\n                    return(\n                        <Button type='active' text={`Buy Property ₣${this.state.location.price}`} handleClick={() => {\n                            this.props.payToBank(this.currentUser().id, this.state.location.price)\n                            this.props.sellSpace(this.state.location.id, this.currentUser().id)\n                            setTimeout(() => {\n                                this.state.spacesToSave.push(this.state.location.id)\n                                this.setState({...this.state, ended: true})\n                            }, 250)\n                        }}/>\n                    )\n                }\n                else\n                {\n                    if(this.state.location.user_id !== this.currentUser().id && this.state.text !== `${(this.getUserName(this.state.location.user_id))} owns this space!`)\n                    {\n                        this.setState({...this.state, text: `${(this.getUserName(this.state.location.user_id))} owns this space!`})\n                    }\n                    else if(this.state.location.user_id === this.currentUser().id)\n                    {\n                        this.setState({...this.state, text: `You own this space, ${(this.getUserName(this.state.location.user_id))}!`, ended: true})\n                    }\n                    let rent = this.handleRent(this.state.location)\n                    return(\n                        <Fragment>\n                            <Button type='active' text={`Pay Rent: ₣${rent}`} handleClick={() => {\n                                this.props.payToBank(this.currentUser().id, rent)\n                                this.props.payUser(this.state.location.user_id, rent)\n                                this.setState({...this.state, ended: true})\n                            }}/>\n                        </Fragment>\n                    )\n                }\n            }\n        }\n        else\n        {\n            return(\n                <>\n                    <Button type='active' text='Trade Properties' handleClick={() => {this.props.trade()}}/>\n                    <Button type='passive' text='End Turn' handleClick={this.nextTurn.bind(this)}/>\n                </>\n            )\n        }\n    }\n\n    getUserName(userId)\n    {\n        let users = this.props.users\n        for(let i = 0; i < users.length; i++)\n        {\n            if(users[i].id === userId)\n            {\n                return users[i].name\n            }\n        }\n        return \"No one\"\n    }\n\n    handleRent(space)\n    {\n        switch(space.color)\n        {\n            case 'Mint':\n                switch(space.id)\n                {\n                    case 12:\n                        if(this.props.spaces[27].user_id === space.user_id)\n                        {\n                            return (this.state.total * 10)\n                        }\n                        else\n                        {\n                            return (this.state.total * 4)\n                        }\n                    case 28:\n                        if(this.props.spaces[11].user_id === space.user_id)\n                        {\n                            return (this.state.total * 10)\n                        }\n                        else\n                        {\n                            return (this.state.total * 4)\n                        }\n                }\n            case 'Black':\n                let rent = 25\n                for(let i = 4; i < 39; i += 10)\n                {\n                    if(this.props.spaces[i].user_id === space.user_id && this.props.spaces[i].id !== space.id)\n                    {\n                        rent = rent * 2\n                    }\n                }\n                return rent\n            default:\n                return space.flat_rent\n        }\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{users: state.users, spaces: state.spaces}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        moveUserOneSpace: (id) => dispatch(moveUserOneSpace(id)),\n        saveUser: (user) => dispatch(saveUser(user)),\n        payToBank: (id, amount) => dispatch(payToBank(id, amount)),\n        payUser: (id, amount) => dispatch(payUser(id, amount)),\n        doubleUser: (id) => dispatch(doubleUser(id)),\n        resetDoubles: (id) => dispatch(resetDoubles(id)),\n        sellSpace: (space_id, user_id) => dispatch(sellSpace(space_id, user_id)),\n        saveSpace: (space) => dispatch(saveSpace(space))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TurnHandler)","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/UserForm.js",[],["91","92"],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/actions/spaceActions.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Roller.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/PropCard.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Menu.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/NewUserCard.js",[],["93","94"],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/AboutPage.js",["95"],"import React from 'react'\nimport { NavLink, Link } from 'react-router-dom'\n\nexport default function AboutPage() {\n    return(<div>\n        <div className='start-button'>\n            <NavLink to='/'>Back To Menu</NavLink>\n        </div>\n        <p>This is a developmental build of what will eventually be Fomopoly. I've played many board games looking for an experience like this, but my search has been unsuccessful. I decided to create it myself. The title is a play on words. See, when a player owns all of one set of spaces of the same color, it's kind of like they have a \"monopoly\" over the whole area. But monopolies aren't fun. They're bad and illegal. So I decided to make the monopolies fun-monopolies, hence the name: Fomopoly. I didn't really know what the rents should be, so I sort of just put in random numbers? There's kind of a pattern to it, a little, but it was mostly just random. As a result, the game might have some balancing issues. If you notice any, feel free to report those issues via the link on the bottom of this page.</p>\n        <a href='https://github.com/Directrix777/fomopoly'>Report An Issue</a>\n    </div>)\n}","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/actions/userActions.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/AboutPageContainer.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/TradeHandler.js",["96"],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/TraderCard.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/UserStatCard.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/App.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/CornerSpace.js",["97"],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"98","replacedBy":"102"},{"ruleId":"100","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":141,"column":13,"nodeType":"106","messageId":"107","endLine":147,"endColumn":21},{"ruleId":"108","severity":1,"message":"109","line":296,"column":17,"nodeType":"110","messageId":"111","endLine":316,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":317,"column":13,"nodeType":"114","messageId":"115","endLine":326,"endColumn":28},{"ruleId":"98","replacedBy":"116"},{"ruleId":"100","replacedBy":"117"},{"ruleId":"98","replacedBy":"118"},{"ruleId":"100","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":2,"column":19,"nodeType":"122","messageId":"123","endLine":2,"endColumn":23},{"ruleId":"124","severity":1,"message":"125","line":74,"column":128,"nodeType":"126","messageId":"127","endLine":74,"endColumn":132,"fix":"128"},{"ruleId":"108","severity":1,"message":"109","line":9,"column":5,"nodeType":"110","messageId":"111","endLine":40,"endColumn":6},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],["129"],["130"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case",["129"],["130"],["129"],["130"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"131","text":"132"},"no-global-assign","no-unsafe-negation",[2331,2342],""]