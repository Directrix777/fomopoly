[{"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Game.js":"1","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Board.js":"2","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/index.js":"3","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/reducers/gameReducer.js":"4","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/TurnHandler.js":"5","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/UserForm.js":"6","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/actions/spaceActions.js":"7","/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Roller.js":"8"},{"size":1179,"mtime":1606265058963,"results":"9","hashOfConfig":"10"},{"size":2376,"mtime":1606773818089,"results":"11","hashOfConfig":"10"},{"size":567,"mtime":1608403257002,"results":"12","hashOfConfig":"10"},{"size":335,"mtime":1606269347242,"results":"13","hashOfConfig":"10"},{"size":7848,"mtime":1608665659238,"results":"14","hashOfConfig":"10"},{"size":2059,"mtime":1606930964739,"results":"15","hashOfConfig":"10"},{"size":251,"mtime":1606326454150,"results":"16","hashOfConfig":"10"},{"size":415,"mtime":1606843601161,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"kqnvbd",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Game.js",["36"],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Board.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/index.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/reducers/gameReducer.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/TurnHandler.js",["37"],"import React, { Component } from 'react'\nimport {connect} from 'react-redux'\nimport {moveUserOneSpace, saveUser, payToBank, payUser, doubleUser, resetDoubles} from '../actions/userActions'\nimport Roller from './Roller'\nimport Button from './Button'\n\nclass TurnHandler extends Component{\n    constructor(props)\n    {\n        super()\n        this.state = {currentUserIndex: 0, firstDice: 3, secondDice: 4, total: 0, rollable: 'active-button', landed: false}\n    }\n\n    currentUser() {\n        return this.props.users[this.state.currentUserIndex]\n    }\n\n    handleRoll()\n    {\n        if(this.state.rollable !== 'disabled-button')\n        {\n            this.setState({...this.state, rollable: 'disabled-button'})\n            this.roll()\n            setTimeout(() => {\n                if(this.state.firstDice !== this.state.secondDice)\n                {\n                    this.moveUser()\n                    this.props.resetDoubles(this.currentUser().id)\n                }\n                else\n                {\n                    this.props.doubleUser(this.currentUser().id)\n                    setTimeout(() => {\n                        if(this.currentUser().doubles_rolled === 3)\n                        {\n                            console.log('rolled too many doubles')\n                            this.currentUser().in_jail = true\n                            this.currentUser().current_location = 10\n                            this.props.resetDoubles(this.currentUser().id)\n                            this.setState({...this.state, landed: true})\n                        }\n                        else\n                        {\n                            this.moveUser()\n                        }\n                    }, 150)\n                }\n            }, 150)\n\n        }\n    }\n\n    handleLanding()\n    {\n        switch(this.currentUser().current_location)\n        {\n            case 4:\n                this.props.payToBank(this.currentUser().id, 200)\n                break\n            case 30:\n                this.currentUser().in_jail = true\n                this.currentUser().current_location = 10\n                this.props.resetDoubles(this.currentUser().id)\n                break\n            case 38:\n                this.props.payToBank(this.currentUser().id, 100)\n                break\n            default:\n                //nothing. This should only happen on free parking and just visiting/jail\n        }\n        this.setState({...this.state, landed: true})\n    }\n\n    roll()\n    {\n        const firstDice = parseInt((Math.random() * 6) + 1)\n        const secondDice = parseInt((Math.random() * 6) + 1)\n        const total = firstDice + secondDice\n        this.setState({firstDice: firstDice, secondDice: secondDice, total: total, gotten: false});\n    }\n\n    moveUser()\n    {\n        const user = this.currentUser()\n        const handleLanding = this.handleLanding.bind(this);\n        const passGo = (() => this.props.payUser(this.currentUser().id, 200)).bind(this)\n        (function myLoop(i, action) {\n            setTimeout(function() {\n                if(user.current_location === 39)\n                {\n                    passGo()\n                }\n                action(user.id)       \n                if (--i) \n                {\n                    myLoop(i, action);\n                }\n                else \n                {\n                    handleLanding()\n                }\n            }, 500)\n        })(this.state.total, this.props.moveUserOneSpace);\n    }\n\n    nextTurn()\n    {\n        if (this.currentUser().doubles_rolled === 0 || this.currentUser().in_jail === true)\n        {\n            if(this.currentUser().in_jail === false)\n            {\n                this.props.resetDoubles(this.currentUser().id)\n            }\n            this.setState((previousState) => {\n                if(this.state.currentUserIndex < this.props.users.length - 1)\n                {\n                    return {currentUserIndex: previousState.currentUserIndex + 1, rollable: 'active-button', landed: false}\n                }\n                else\n                {\n                    this.props.users.forEach((user) => {this.props.saveUser(user)})\n                    return {currentUserIndex: 0, rollable: 'active-button', landed: false}\n                }\n            })\n        }\n        else\n        {\n            this.setState({...this.state, landed: false, rollable: 'active-button'})\n        }\n    }\n\n    render(){\n        \n        return(\n            <div className='turn-handler'>\n                <Roller first={this.state.firstDice} second={this.state.secondDice} total={this.state.total}/>\n                <div className={this.state.rollable} onClick={() => this.handleRoll()}>Roll</div>\n                <p>{`Now ${this.currentUser().name}'s Turn!`}</p>\n                {this.renderButtons()}\n            </div>\n        )\n    }\n\n    renderButtons()\n    {\n        if(this.state.landed)\n        {       \n                return (\n                    <>\n                        <Button type='passive' text='End Turn' handleClick={this.nextTurn.bind(this)}/>\n                    </>\n                )\n        }\n        else if(this.currentUser().current_location === 10 && this.currentUser().in_jail === true)\n        {\n            if(this.state.rollable === 'active-button')\n            {\n                this.setState({...this.state, rollable: 'disabled-button'})\n            }\n            return (\n                <>\n                    <Button type='active' text='Pay Bail' handleClick={() => {\n                        this.currentUser().in_jail = false\n                        this.setState({...this.state, rollable: 'active-button'})\n                        this.props.resetDoubles(this.currentUser().id)\n                        this.props.payToBank(this.currentUser().id, 50)\n                    }}/>\n                    <Button type='active' text={`Roll for Doubles (${this.currentUser().doubles_rolled + 1})`} handleClick={() => {\n                        this.roll()\n                        setTimeout(() => {\n                            if(this.state.firstDice === this.state.secondDice)\n                            {\n                                this.currentUser().in_jail = false\n                                this.props.resetDoubles(this.currentUser().id)\n                                this.moveUser()\n                            }\n                            else\n                            {\n                                this.props.doubleUser(this.currentUser().id)\n                                if(this.currentUser().doubles_rolled === 3)\n                                {\n                                    this.currentUser().in_jail = false\n                                    this.props.resetDoubles(this.currentUser().id)\n                                    this.props.payToBank(this.currentUser().id, 50)\n                                    this.moveUser()\n                                }\n                                else\n                                {\n                                    this.handleLanding()\n                                }\n                            }\n                        }, 150)\n                    }}/>\n                </>\n            )\n        }\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{users: state.users, moving: state.moving}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        moveUserOneSpace: (id) => dispatch(moveUserOneSpace(id)),\n        saveUser: (user) => dispatch(saveUser(user)),\n        payToBank: (id, amount) => dispatch(payToBank(id, amount)),\n        payUser: (id, amount) => dispatch(payUser(id, amount)),\n        doubleUser: (id) => dispatch(doubleUser(id)),\n        resetDoubles: (id) => dispatch(resetDoubles(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TurnHandler)",["38","39"],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/UserForm.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/actions/spaceActions.js",[],"/Users/programmingschool/Development/Projects/fomopoly/fomopoly-frontend/src/components/Roller.js",[],{"ruleId":"40","severity":1,"message":"41","line":46,"column":7,"nodeType":"42","messageId":"43","endLine":46,"endColumn":22},{"ruleId":"44","severity":1,"message":"45","line":86,"column":79,"nodeType":"46","messageId":"47","endLine":86,"endColumn":83,"fix":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},"no-unused-vars","'mapStateToProps' is assigned a value but never used.","Identifier","unusedVar","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"53","text":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],[2975,2986],"","no-global-assign","no-unsafe-negation"]